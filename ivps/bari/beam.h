#ifndef BEAM_H
#define BEAM_H

class Beam : public BaseIVP {
	long _n;
	Vec<FP> _z;
	Vec<FP> _z_mlp1;
	Vec<FP> _z_mlm1;
	Vec<FP> _c;
	Vec<FP> _cp1;
	Vec<FP> _cm1;
	Vec<FP> _dp1;
	Vec<FP> _dm1;
	Vec<FP> _g;
	Vec<FP> _v;
	
protected:
	void TridiagSolve(Vec<FP>& x, const Vec<FP>& a, const Vec<FP>& b, Vec<FP> c) {
		long N = x.Size();

		c[0] = c[0] / b[0];
		x[0] = x[0] / b[0];

		for( long i = 1; i < N-1; i++ ) {
			FP m = 1. / (b[i] - a[i-1]*c[i-1]);
			c[i] *= m;
			x[i] = (x[i] - a[i-1]*x[i-1])*m;
		}
		
		FP m = 1. / (b[N-1] - a[N-1]*c[N-2]);
		x[N-1] = (x[N-1] - a[N-2]*x[N-2])*m;

		for( long i = N-1; i-- > 0; )
			x[i] -= c[i]*x[i+1];	
	}

	virtual void RHS(const FP t, const Vec<FP>& y, Vec<FP>& yp) {
		_z.AssignSplice(y.Splice(0,_n), 1);
		_z[0] = -y[0];
		_z[_n+1] = y[_n-1];

		_z_mlp1 = _z.Splice(1,_n) - _z.Splice(2,_n+1);
		_z_mlm1 = _z.Splice(2,_n+1) - _z.Splice(1,_n);

		for( long i = 0; i < _n-1; i++ ) {
			_cp1[i] = -cos(_z_mlp1[i]);
			_cm1[i] = -cos(_z_mlm1[i]);
			_dp1[i] = -sin(_z_mlp1[i]);
			_dm1[i] = -sin(_z_mlm1[i]);
		}
	
		_v = _z.Splice(0,_n) - 2*_z.Splice(1,_n+1) + _z.Splice(2,_n+2);
		_v *= sqr(sqr(_n));

		if( 0 <= t && t <= M_PI ) {
			FP phi = 1.5*sqr(sin(t));
			FP Fx = -phi;
			FP Fy = phi;
			for( long i = 0; i < _n; i++ )
				_v[i] += (_n*_n) * (cos(_z[i+1])*Fy - sin(_z[i+1])*Fx);
		}

		if( t < 0 )
			throw Exception() << "Beam problem must not have time < 0.";

		for( long i = 0; i < _n; i++ ) {
			_g[i] = sqr(y[_n+i]);
			if( i > 0 ) _g[i] += _dm1[i-1]*_v[i-1];
			if( i < _n-1 ) _g[i] += _dp1[i]*_v[i+1];
		}        

		TridiagSolve(_g, _cm1, _c, _cp1);

		yp.AssignSplice(y.Splice(_n,2*_n), 0);
			
		for( long i = 0; i < _n; i++ ) {
			yp[_n+i] = _c[i]*_v[i];
			if( i > 0 ) yp[_n+i] += _cm1[i-1]*_v[i-1] + _dm1[i-1]*_g[i-1];
			if( i < _n-1 ) yp[_n+i] += _cp1[i]*_v[i+1] + _dp1[i]*_g[i+1];
		}
	}

public:
	Beam(Hash<ParamValue>& params) : BaseIVP(params), _n(40) {
		params["tf"].SetFP(5);

		_initialCondition.Resize(2*_n);
		_initialCondition.Zero();

		_z.Resize(_n+2);
		_z_mlp1.Resize(_n-1);
		_z_mlm1.Resize(_n-1);

		_c.Resize(_n);
		_c[0] = 1;
		_c[_n-1] = 3;
		_c.AssignSplice(2*Vec<FP>::Ones(_n-2), 1);

		_cp1.Resize(_n-1);
		_cm1.Resize(_n-1);
		_dp1.Resize(_n-1);
		_dm1.Resize(_n-1);
		_v.Resize(_n);
		_g.Resize(_n);
	}

	virtual const char* GetName() {
		return "BEAM";
	}
};

#endif

/* Reference solution
-0.5792366591285007e-2,
-0.1695298550721735e-1,
-0.2769103312973094e-1,
-0.3800815655879158e-1,
-0.4790616859743763e-1,
-0.5738710435274594e-1,
-0.6645327313454617e-1,
-0.7510730581979037e-1,
-0.8335219765414992e-1,
-0.9119134654647947e-1,
-0.9862858700132091e-1,
-0.1056682200378002,
-0.1123150395409595,
-0.1185743552727245,
-0.1244520128755561,
-0.1299544113264161,
-0.1350885180610398,
-0.1398618819194422,
-0.1442826441015242,
-0.1483595472463012,
-0.1521019429001447,
-0.1555197978061129,
-0.1586236993420229,
-0.1614248603702127,
-0.1639351238193223,
-0.1661669673440852,
-0.1681335081778558,
-0.1698485080602243,
-0.1713263782440888,
-0.1725821847462537,
-0.1736316537975654,
-0.1744911773840049,
-0.1751778187863392,
-0.1757093178712902,
-0.1761040960228576,
-0.1763812607175549,
-0.1765606097564671,
-0.1766626352260565,
-0.1767085270807460,
-0.1767201761075488,
0.3747362681329794e-1,
0.1099117880217593,
0.1798360474312799,
0.2472427305442391,
0.3121293820596567,
0.3744947377019500,
0.4343386073492798,
0.4916620354601748,
0.5464677854586807,
0.5987609702624270,
0.6485493611110740,
0.6958435169132503,
0.7406572668520808,
0.7830081747813241,
0.8229176659201515,
0.8604110305190560,
0.8955175502377805,
0.9282708263127953,
0.9587089334522034,
0.9868747821728363,
0.1012816579961883e1,
0.1036587736679858e1,
0.1058246826481355e1,
0.1077857811433353e1,
0.1095490222005369e1,
0.1111219164294898e1,
0.1125125269286501e1,
0.1137294526609229e1,
0.1147818025153607e1,
0.1156792132004482e1,
0.1164318845130183e1,
0.1170505992596124e1,
0.1175467424299550e1,
0.1179323003228859e1,
0.1182198586299667e1,
0.1184226111223146e1,
0.1185543909805575e1,
0.1186297084203716e1,
0.1186637618908127e1,
0.1186724615113034e1

*/

